import hmac
import hashlib
import struct
from binascii import hexlify, unhexlify


def get_hotp_impl(secret_bytes: bytes, counter: int) -> int:
    hmac_obj = hmac.new(secret_bytes, digestmod=hashlib.sha1)

    counter_raw = struct.pack(">Q", counter)

    hmac_obj.update(counter_raw)

    digest_res = hmac_obj.digest()
    offset = digest_res[-1] % 16
    truncated = digest_res[offset: offset + 4]
    last_31bits = int(hexlify(truncated), 16) & 0x7fffffff

    htop_value = last_31bits % 10**6
    return htop_value


def get_hotp(secret_bytes: bytes, counter: int) -> str:
    htop_value = get_hotp_impl(secret_bytes, counter)
    return f"{htop_value:06d}"


def get_totp_impl():
    pass


def get_totp():
    pass


if __name__ == "__main__":
    secret_bytes = b"12345678901234567890"

    # The HOTP values generated by the HOTP generator are treated as big endian.
    for counter in range(10):
        print(f"The HTOP value of the counter {counter}: {get_hotp(secret_bytes, counter)}")

