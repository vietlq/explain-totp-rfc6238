import hmac
import hashlib
import struct
from binascii import hexlify, unhexlify
from enum import Enum


class DigestAlgo(Enum):
    SHA1 = "SHA1"
    SHA256 = "SHA256"
    SHA512 = "SHA512"


DIGEST_ALGO_MAP = {
    "SHA1": hashlib.sha1,
    "SHA256": hashlib.sha256,
    "SHA512": hashlib.sha512,
}


def get_hotp_impl(secret_bytes: bytes, counter: int, make_digest_fn) -> int:
    hmac_obj = hmac.new(secret_bytes, digestmod=make_digest_fn)

    counter_raw = struct.pack(">Q", counter)

    hmac_obj.update(counter_raw)

    digest_res = hmac_obj.digest()
    offset = digest_res[-1] % 16
    truncated = digest_res[offset: offset + 4]
    last_31bits = int(hexlify(truncated), 16) & 0x7fffffff

    htop_value = last_31bits % 10**6
    return htop_value


def get_hotp(secret_bytes: bytes, counter: int, digest_algo: DigestAlgo) -> str:
    make_digest_fn = DIGEST_ALGO_MAP[digest_algo.value]
    htop_value = get_hotp_impl(secret_bytes, counter, make_digest_fn)
    return f"{htop_value:06d}"


def get_totp_impl():
    pass


def get_totp():
    pass


if __name__ == "__main__":
    secret_bytes = b"12345678901234567890"

    # The HOTP values generated by the HOTP generator are treated as big endian.
    for counter in range(10):
        print(f"The HTOP value of the counter {counter}: {get_hotp(secret_bytes, counter, DigestAlgo.SHA1)}")
